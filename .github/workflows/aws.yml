# .github/workflows/deployment.yml

name: Deploy to AWS ECS

on:
  # This enables manual triggering from the GitHub Actions UI.
  # No 'inputs:' block means no parameters will be prompted.
  workflow_dispatch:

env:
  AWS_REGION: us-east-1 # Define your AWS region

jobs:
  deploy:
    runs-on: [self-hosted, macOS, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}


    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0 # Specify a compatible Terraform version

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./ # Assuming main.tf is in a 'terraform' directory

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ./

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      working-directory: ./
      # Add -var-file="secrets.tfvars" or -var="ENV_VAR=${{ secrets.YOUR_SECRET }}" if you manage sensitive vars this way

    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./
      #env:
        # Example of passing environment variables from GitHub Secrets to Terraform
        # Ensure these are defined in your Terraform variables (e.g., in variables.tf)
        # TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        # TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        # TF_VAR_app_secret_key: ${{ secrets.APP_SECRET_KEY }}
        # ... and so on for any application-specific secrets



    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2

    # - name: Get ECR repository URL
    #   id: ecr_url
    #   run: |
    #     ECR_REPO_URL=$(aws ecr describe-repositories --repository-names my-app-repo --query "repositories[0].repositoryUri" --output text)
    #     echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_ENV
      # working-directory: ./terraform # Assuming main.tf is in a 'terraform' directory

    # - name: Build and push Docker image to ECR
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     REPOSITORY_NAME: my-app-repo
    #     IMAGE_TAG: ${{ github.sha }} # Use commit SHA as image tag for uniqueness
    #   run: |
    #     docker build -t $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG
    #     # Optionally, tag with 'latest' as well
    #     docker tag $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG $ECR_REGISTRY/$REPOSITORY_NAME:latest
    #     docker push $ECR_REGISTRY/$REPOSITORY_NAME:latest
      # Assuming your Dockerfile is in the root of your repository.
      # If not, adjust the `.` to the correct path, e.g., `./app`    
